//Biblioteca
program{
    return(hayBolitas_Al_(Negro,Este))
}

//Practica 2 - Ejercicio 3.a
procedure PonerUnaDeCada(){
    Poner(Azul)
    Poner(Negro)
    Poner(Rojo)
    Poner(Verde)
}

//Practica 3 - Ejercicio 9
procedure Poner_DeColor_(cantidadAPoner, colorAPoner){
    repeat(cantidadAPoner){
        Poner(colorAPoner)
    }
}

//Practica 3 - Ejercicio 10
procedure Mover_VecesAl_(cantidadAMover, direcciónAMover){
    repeat(cantidadAMover){
       Mover(direcciónAMover) 
    }
}

//Practica 3 - Ejercicio 11
procedure Sacar_DeColor_(cantidadASacar, colorASacar){
    repeat(cantidadASacar){
       Sacar(colorASacar) 
    }
}

//Practica 5 - Ejercicio 6
procedure SacarTodasLasDeColor_(colorASacar){
    Sacar_DeColor_(nroBolitas(colorASacar), colorASacar)
}

//Practica 6 - Ejercicio 4.a
procedure Poner_Si_(color, condición){
    if(condición){
        Poner(color)
    }
}

//Practica 6 - Ejercicio 4.b
procedure Sacar_Si_(color, condición){
    if(condición){
        Sacar(color)
    }
}

//Practica 6 - Ejercicio 4.c
procedure Mover_Si_(dirección, condición){
    if(condición){
        Mover(dirección)
    }
}

//Practica 7 - Ejercicio 2.a
function esCeldaVacia(){
    /*
        Proposito: Verificar si la celda actual esta vacia
        Precondincion: Ninguna
        Tipo: Booleano
    */
    return ( not hayBolitas(Rojo) && not hayBolitas(Negro) 
            && not hayBolitas(Verde) && not hayBolitas(Azul))
}

//Practica 7 - Ejercicio 2.b
function tieneUnaDeCada(){
    /*
        Proposito: Verificar si en la celda actual hay al menos una bolita de cada color
        Precondicion: Ninguna
        Tipo: Booleano
    */
    return (hayBolitas(Rojo) && hayBolitas(Negro) && hayBolitas(Verde) && hayBolitas(Azul))
}

//Practica 7 - Ejercicio 2.c
function esCeldaConBolitas(){
    /*
        Proposito: Verificar si en la celda actual hay almenos una bolita, sin importar el color
        Precondicion: Ninguno
        Tipo: Booleano
    */
    return (hayBolitas(Rojo) || hayBolitas(Negro) || hayBolitas(Verde) || hayBolitas(Azul))
}

//Practica 8 - Ejercicio 6.a
procedure IrAPrimeraCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria){
    IrAlBorde(opuesto(dirPrincipal))
    IrAlBorde(opuesto(dirSecundaria))
}

//Practica 8 - Ejercicio 6.b
function haySiguienteCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria){
    return(puedeMover(dirPrincipal) || puedeMover(dirSecundaria))
}

//Practica 8 - Ejercicio 6.c
procedure IrASiguienteCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria){
    if(puedeMover(dirPrincipal)){
        Mover(dirPrincipal)
    }else{
        IrAlBorde(opuesto(dirPrincipal))
        Mover(dirSecundaria)
    }
}

//Practica 9 - Ejercicio 2
function hayBolitas_Al_(color,direccion){
    hayBolita := False
    if(puedeMover(direccion)){
        Mover(direccion)
        hayBolita := hayBolitas(color)
    }
    return(hayBolita)
}

//Practica 9 - Ejercicio 11
procedure mínimoEntre_Y_(primerNumero, segundoNumero){
    return(
        choose  primerNumero when (primerNumero < segundoNumero)
                segundoNumero otherwise
        )
}

//Practica 9 - Ejercicio 12
procedure máximoEntre_Y_(primerNumero, segundoNumero){
   return(
        choose  primerNumero when (primerNumero > segundoNumero)
                segundoNumero otherwise
        ) 
}