//Biblioteca
program{
    return(losMayoresA_De_(7, [3,9,7,8,5,10]))
}

//Practica 2 - Ejercicio 3.a
procedure PonerUnaDeCada(){
    Poner(Azul)
    Poner(Negro)
    Poner(Rojo)
    Poner(Verde)
}

//Practica 3 - Ejercicio 9
procedure Poner_DeColor_(cantidadAPoner, colorAPoner){
    repeat(cantidadAPoner){
        Poner(colorAPoner)
    }
}

//Practica 3 - Ejercicio 10
procedure Mover_VecesAl_(cantidadAMover, direcciónAMover){
    repeat(cantidadAMover){
       Mover(direcciónAMover) 
    }
}

//Practica 3 - Ejercicio 11
procedure Sacar_DeColor_(cantidadASacar, colorASacar){
    repeat(cantidadASacar){
       Sacar(colorASacar) 
    }
}

//Practica 5 - Ejercicio 6
procedure SacarTodasLasDeColor_(colorASacar){
    Sacar_DeColor_(nroBolitas(colorASacar), colorASacar)
}

//Practica 6 - Ejercicio 4.a
procedure Poner_Si_(color, condición){
    if(condición){
        Poner(color)
    }
}

//Practica 6 - Ejercicio 4.b
procedure Sacar_Si_(color, condición){
    if(condición){
        Sacar(color)
    }
}

//Practica 6 - Ejercicio 4.c
procedure Mover_Si_(dirección, condición){
    if(condición){
        Mover(dirección)
    }
}

//Practica 7 - Ejercicio 2.a
function esCeldaVacia(){
    /*
        Proposito: Verificar si la celda actual esta vacia
        Precondincion: Ninguna
        Tipo: Booleano
    */
    return ( not hayBolitas(Rojo) && not hayBolitas(Negro) 
            && not hayBolitas(Verde) && not hayBolitas(Azul))
}

//Practica 7 - Ejercicio 2.b
function tieneUnaDeCada(){
    /*
        Proposito: Verificar si en la celda actual hay al menos una bolita de cada color
        Precondicion: Ninguna
        Tipo: Booleano
    */
    return (hayBolitas(Rojo) && hayBolitas(Negro) && hayBolitas(Verde) && hayBolitas(Azul))
}

//Practica 7 - Ejercicio 2.c
function esCeldaConBolitas(){
    /*
        Proposito: Verificar si en la celda actual hay almenos una bolita, sin importar el color
        Precondicion: Ninguno
        Tipo: Booleano
    */
    return (hayBolitas(Rojo) || hayBolitas(Negro) || hayBolitas(Verde) || hayBolitas(Azul))
}

//Practica 8 - Ejercicio 6.a
procedure IrAPrimeraCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria){
    IrAlBorde(opuesto(dirPrincipal))
    IrAlBorde(opuesto(dirSecundaria))
}

//Practica 8 - Ejercicio 6.b
function haySiguienteCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria){
    return(puedeMover(dirPrincipal) || puedeMover(dirSecundaria))
}

//Practica 8 - Ejercicio 6.c
procedure IrASiguienteCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria){
    if(puedeMover(dirPrincipal)){
        Mover(dirPrincipal)
    }else{
        IrAlBorde(opuesto(dirPrincipal))
        Mover(dirSecundaria)
    }
}

//Practica 9 - Ejercicio 2
function hayBolitas_Al_(color,direccion){
    hayBolita := False
    if(puedeMover(direccion)){
        Mover(direccion)
        hayBolita := hayBolitas(color)
    }
    return(hayBolita)
}

//Practica 9 - Ejercicio 11
function mínimoEntre_Y_(primerValor, segundoValor){
    return(
        choose  primerValor when (primerValor < segundoValor)
                segundoValor otherwise
        )
}

//Practica 9 - Ejercicio 12
function máximoEntre_Y_(primerValor, segundoValor){
   return(
        choose  primerValor when (primerValor > segundoValor)
                segundoValor otherwise
        ) 
}

//Practica 9 - Ejercicio 17
function distanciaAlBorde_(direccion){
    distancia := 0
    while(puedeMover(direccion)){
        Mover(direccion)
        distancia := distancia + 1
    }
    return(distancia)
}

//Practica 9 - Ejercicio 18
function coordenadaX() {
    x := 0
    while (puedeMover(Oeste)) {
        Mover(Oeste)
        x := x + 1  
    }
    repeat (x) {
        Mover(Este)
    }
    return (x)
}

function coordenadaY() {
    y := 0
    while (puedeMover(Sur)) {
        y := y + 1
        Mover(Sur)
    }
    repeat (y) {
        Mover(Norte)
    }
    return (y)
}

//Practica 9 - Ejercicio 19
function nroColumnas(){
    columnas := 1
    IrAlBorde(Oeste)
    while(puedeMover(Este)){
        Mover(Este)
        columnas := columnas + 1
    }
    
    return(columnas)
}

function nroFilas(){
   filas := 1
    IrAlBorde(Sur)
    while(puedeMover(Norte)){
        Mover(Norte)
        filas := filas + 1
    }
    
    return(filas) 
}

//Practica 9 - Ejercicio 20
function nroVacias(){
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este,Norte)
    celdasVacias := unoSiEsVacia_ceroSiNo()
    while(haySiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)){
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)
        celdasVacias := celdasVacias + unoSiEsVacia_ceroSiNo()
    }
    return(celdasVacias)
}

//Practica 9 - Ejercicio 25
function unoSiEsVacia_ceroSiNo(){
    return(
        choose 1 when (esCeldaVacia())
               0 otherwise
        )
}

//Practica 9 - Ejercicio 21
function cantidadDeCeldasConBolitasDeColor_(color){
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este,Norte)
    celdasConBolitasDeColor := unoSiHayDeColor_YceroSiNo(color)
    while(haySiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)){
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)
        celdasConBolitasDeColor := celdasConBolitasDeColor + unoSiHayDeColor_YceroSiNo(color)
    }
    return(celdasConBolitasDeColor)
}

//Practica 9 - Ejercicio 25
function unoSiHayDeColor_YceroSiNo(color){
    return(
        choose 1 when (hayBolitas(color))
               0 otherwise
        )
}

//Practica 9 - Ejercicio 22
function nroBolitasTotalDeColor_(color){
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este,Norte)
    nroTotalDeBolitasDeColor := nroBolitas(color)
    while(haySiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)){
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)
        nroTotalDeBolitasDeColor := nroTotalDeBolitasDeColor + nroBolitas(color)
    }
    return(nroTotalDeBolitasDeColor)
}

//Practica 11 - Ejercicio 14
function reversoDe_(unaLista){
    listaReversa := []
    listaOriginal := unaLista
    while (not esVacía(listaOriginal)) {
        listaReversa := [primero(listaOriginal)] ++ listaReversa
        listaOriginal := resto(listaOriginal)
    }
    return (listaReversa)
}

//Practica 11 - Ejercicio 15 a
function longitudDe_(unaLista){
    restoLista := unaLista
    cantidad := 0
    while(not esVacía(restoLista)){
        cantidad := cantidad + 1
        restoLista := resto(restoLista)
    }
    return(cantidad)
}

//Practica 11 - Ejercicio 15 b
function sumatoriaDe_(unaLista){
    sumatoria := 0
    listaOriginal := unaLista
    while (not esVacía(listaOriginal)) {
        sumatoria := primero(listaOriginal) + sumatoria
        listaOriginal := resto(listaOriginal)
    }
    return(sumatoria)
}

//Practica 11 - Ejercicio 15 c
function productoriaDe_(unaLista){
    listaOriginal := unaLista
    producto := primero(listaOriginal)
    listaOriginal := resto(listaOriginal)
    while (not esVacía(listaOriginal)) {
        producto := primero(listaOriginal) * producto
        listaOriginal := resto(listaOriginal)
    }
    return(producto)
}

//Practica 11 - Ejercicio 16 d
function direccionesOpuestasDe_(unaLista){
    listaOpuestos := []
    listaOriginal := unaLista
    while (not esVacía(listaOriginal)) {
        listaOpuestos := listaOpuestos ++ [opuesto(primero(listaOriginal))] 
        listaOriginal := resto(listaOriginal)
    }
    return (listaOpuestos)
}

//Practica 11 - Ejercicio 16 e 
function siguientesDe_(unaLista){
    listaSiguientes := []
    listaOriginal := unaLista
    while (not esVacía(listaOriginal)) {
        listaSiguientes := listaSiguientes ++ [siguiente(primero(listaOriginal))] 
        listaOriginal := resto(listaOriginal)
    }
    return (listaSiguientes)
}

//Practica 11 - Ejericio 16 f
function elementosDe_multiplicadosPor_(unaLista, multiplicador){
    listaMultiplicados := []
    listaOriginal := unaLista
    while (not esVacía(listaOriginal)) {
        listaMultiplicados := listaMultiplicados ++ [multiplicador * primero(listaOriginal)]
        listaOriginal := resto(listaOriginal)
    }
    return (listaMultiplicados)
}

//Practica 11 - Ejercicio 17 g
function númerosParesDe_(unaLista){
    listaPares := []
    listaOriginal := unaLista
    while(not esVacía(listaOriginal)){
        if(primero(listaOriginal) mod 2 == 0){
            listaPares := listaPares ++ [primero(listaOriginal)]
        }
        listaOriginal := resto(listaOriginal)
    }
    return(listaPares)
}

//Practica 11 - Ejercicio 17 h
function laLista_SinElElemento_(unaLista, elementoAEliminar){
    listaSinElemento := []
    listaOriginal := unaLista
    while(not esVacía(listaOriginal)){
        if(primero(listaOriginal) /= elementoAEliminar){
            listaSinElemento := listaSinElemento ++ [primero(listaOriginal)]
        }
        listaOriginal := resto(listaOriginal)
    }
    return(listaSinElemento)
}

//Practica 11 - Ejercicio 17 i
function losMayoresA_De_(umbral, unaLista){
    listaMayorAUmbral := []
    listaOriginal := unaLista
    while(not esVacía(listaOriginal)){
        if(primero(listaOriginal) > umbral){
            listaMayorAUmbral := listaMayorAUmbral ++ [primero(listaOriginal)]
        }
        listaOriginal := resto(listaOriginal)
    }
    return(listaMayorAUmbral)
}





